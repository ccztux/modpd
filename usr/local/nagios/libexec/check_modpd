#!/usr/bin/env bash

#========================================================================================================
#
#  Author:		Christian Zettel (ccztux)
#			2017-05-14
#			http://linuxinside.at
#
#  Copyright:		Copyright © 2017 Christian Zettel (ccztux), all rights reserved
#
#  Project website:	https://github.com/ccztux/modpd
#
#  Last Modification:	Christian Zettel (ccztux)
#			2017-09-28
#
#  Description:		Nagios check plugin to check modpd.
#
#  License:		GNU GPLv3
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#========================================================================================================


#--------------
# Bash options:
#--------------

set -o noclobber || { printf "Setting essential bash option: 'noclobber' was not successful, terminating...\\n" ; exit 250 ; }
set -o nounset || { printf "Setting essential bash option: 'nounset' was not successful, terminating...\\n" ; exit 251 ; }
set -o pipefail || { printf "Setting essential bash option: 'pipefail' was not successful, terminating...\\n" ; exit 252 ; }



#-------
# Traps:
#-------

trap 'sigHandler ERR "${LINENO}" "${BASH_COMMAND}"' ERR || { printf "Setting essential trap for signal: 'ERR' was not successful, terminating...\\n" ; exit 253 ; }
trap 'sigHandler EXIT' EXIT || { printf "Setting essential trap for signal: 'EXIT' was not successful, terminating...\\n" ; exit 254 ; }



#-----------------------
# Script info variables:
#-----------------------

script_name="${0##*/}"
script_version="1.0.3-alpha1"
script_author="Christian Zettel (ccztux)"
script_copyright="Copyright © 2017 ${script_author}, all rights reserved"
script_project_website="https://github.com/ccztux/modpd"
script_last_modification_date="2017-09-28"
script_license="GNU GPLv3"
script_description="Nagios check plugin to check modpd."
script_exit_code="255"



#-----------
# Functions:
#-----------

printUsage()
{
	setDefaultValues

	printf "Usage: %s OPTIONS\\n\\n" "${script_name}"
	printf "Author:\\t\\t\\t%s\\n" "${script_author}"
	printf "Last modification:\\t%s\\n" "${script_last_modification_date}"
	printf "Version:\\t\\t%s\\n\\n" "${script_version}"
	printf "Description:\\t\\t%s\\n\\n" "${script_description}"
	printf "OPTIONS:\\n"
	printf "   -h\\t\\tShows this help.\\n"
	printf "   -c\\t\\tConfig file. (If undefined default value: '%s' will be used.)\\n" "${script_config_file}"
	printf "   -W\\t\\tWarning threshold. (Integer)"
	printf "   -C\\t\\tCritical threshold. (Integer)"
	printf "   -v\\t\\tShows detailed version information.\\n"
}

printScriptInfos()
{
	printf "Author:\\t\\t\\t%s\\n" "${script_author}"
	printf "Project website:\\t%s\\n" "${script_project_website}"
	printf "License:\\t\\t%s\\n\\n" "${script_license}"
	printf "Last modification:\\t%s\\n" "${script_last_modification_date}"
	printf "Version:\\t\\t%s\\n\\n" "${script_version}"
	printf "Description:\\t\\t%s\\n\\n" "${script_description}"
	printf "Copyright:\\t\\t%s\\n" "${script_copyright}"
}

setDefaultValues()
{
	script_config_file="${script_config_file:=/usr/local/modpd/etc/modpd.conf}"
}

isInteger()
{
        if ([ "${1}" -ge "0" ] || [ "${1}" -lt "0" ]) 2>/dev/null ;then
                return 0
        else
                return 1
        fi
}

checkOptions()
{
	if [ ! -z "${warning_threshold:-}" ] ;then
		if ! isInteger "${warning_threshold:-}" ;then
			printf "Option: '-W' is not an integer!\\n\\n"
			printUsage
			script_exit_code="20"
			exit
		fi
	fi

	if [ ! -z "${critical_threshold:-}" ] ;then
		if ! isInteger "${critical_threshold:-}" ;then
			printf "Option: '-C' is not an integer!\\n\\n"
			printUsage
			script_exit_code="21"
			exit
		fi
	fi
}

sigHandler()
{
	local signal="${1:-}"
	local bash_lineno="${2:-}"
	local bash_command="${3:-}"
	local rc=

	case "${signal}" in
		ERR)
			printf "Caught: '%s', at line number: '%s', command: '%s'.\\n" "${signal}" "${bash_lineno}" "${bash_command}"
			script_exit_code="1"
			exit
			;;
		EXIT)

			exit ${script_exit_code}
			;;
	esac
}

includeConfig()
{
	local rc=

	checkFilePermissions "${script_config_file}"
	rc="${?}"

	case "${rc}" in
		4|5|6|7)
			# shellcheck source=/scripts/usr/local/modpd/etc/modpd.conf
			source "${script_config_file}"
			rc="${?}"

			if [ "${rc}" == "0" ] ;then
				return 0
			else
				return 1
			fi
			;;
		10)
			return 2
			;;
		*)
			return 3
			;;
	esac
}

includeCheckDataFile()
{
	local rc=

	checkDirectoryPermissions "${checkdata_directory}"
	rc="${?}"

	case "${rc}" in
		3|7)
			checkFilePermissions "${checkdata_filename}"
			rc="${?}"

			case "${rc}" in
				4|5|6|7)
					# shellcheck source=/scripts/usr/local/modpd/var/checkdata/checkdata.inc.sh
					source "${checkdata_filename}"
					rc="${?}"

					if [ "${rc}" == "0" ] ;then
						return 0
					else
						return 1
					fi
					;;
				10)
					return 2
					;;
				*)
					return 3
					;;
			esac
			;;
		10)
			printf "Checkdata directory doesnt exist."
			script_exit_code="30"
			exit
			;;
		*)
			printf "Checkdata directory exists, but permissions are not ok, exiting."
			script_exit_code="31"
			exit
			;;
	esac
}

checkRegularFileExists()
{
	local file="${1:-}"

	if [ -f "${file}" ] ;then
		return 0
	else
		return 1
	fi
}

checkFilePermissions()
{
	# file doesnt exist:	rc=10
	# read allowed:		rc=4|5|6|7
	# write allowed:	rc=2|3|6|7
	# execute allowed:	rc=1|3|5|7
	# read/write allowed:	rc=6|7

	local file="${1:-}"
	local rc=
	local file_permission=

	checkRegularFileExists "${file}"
	rc="${?}"

	if [ "${rc}" == "0" ] ;then
		if [ -x "${file}" ] ;then
			file_permission="$((file_permission + 2#0001))"
		fi

		if [ -w "${file}" ] ;then
			file_permission="$((file_permission + 2#0010))"
		fi

		if [ -r "${file}" ] ;then
			file_permission="$((file_permission + 2#0100))"
		fi
	else
		file_permission="$((2#1010))"
	fi

	return "${file_permission}"
}

checkDirectoryExists()
{
	local directory="${1:-}"

	if [ -d "${directory}" ] ;then
		return 0
	else
		return 1
	fi
}

checkDirectoryPermissions()
{
	# directory doesnt exist:	rc=10
	# read allowed:			rc=4|5|6|7
	# write allowed:		rc=2|3|6|7
	# execute allowed:		rc=1|3|5|7

	local directory="${1:-}"
	local rc=
	local directory_permission=

	checkDirectoryExists "${directory}"
	rc="${?}"

	if [ "${rc}" == "0" ] ;then
		if [ -x "${directory}" ] ;then
			directory_permission="$((directory_permission + 2#0001))"
		fi

		if [ -w "${directory}" ] ;then
			directory_permission="$((directory_permission + 2#0010))"
		fi

		if [ -r "${directory}" ] ;then
			directory_permission="$((directory_permission + 2#0100))"
		fi
	else
		directory_permission="$((2#1010))"
	fi

	return "${directory_permission}"
}



#-------------
# Get options:
#-------------

OPTERR="0"

# shellcheck disable=SC2213
while getopts ":h.c:W:C:v." OPTION
   do
	case "${OPTION}" in
			h)
				printUsage
				script_exit_code="170"
				exit
				;;
			c)
				script_config_file="${OPTARG}"
				;;
			W)
				warning_threshold="${OPTARG}"
				;;
			C)
				critical_threshold="${OPTARG}"
				;;
			v)
				printScriptInfos
				script_exit_code="171"
				exit
				;;
			\?)
				printf "Invalid option: -%s\\n\\n" "${OPTARG}"
				printUsage
				script_exit_code="172"
				exit
				;;
			:)
				printf "Option: -%s requires an argument.\\n\\n" "${OPTARG}"
				printUsage
				script_exit_code="173"
				exit
				;;
	esac
   done



#------
# Main:
#------

setDefaultValues
checkOptions
includeConfig

case "${?}" in
	0)
		includeCheckDataFile
		perfdata="'runtime'=${modpd_runtime}s;;;; 'total_jobs'=${script_job_counter_total};;;; 'jobs_ok'=${script_job_counter_ok};;;; 'jobs_nok'=${script_job_counter_nok};;;; 'jobs_timed_out'=${script_job_counter_timeout};;;; 'hosts'=${script_host_counter};;;; 'services'=${script_service_counter};;;; 'invalid_datasets'=${script_invalid_data_counter};;;;"
		printf "OK - %s\\n" "${perfdata}"
		script_exit_code="0"
		exit
		;;
	1)
		printf "Including config file: '%s' was not successful, exiting.\\n" "${script_config_file}"
		script_exit_code="110"
		exit
		;;
	2)
		printf "Config file: '%s' does not exist, exiting.\\n" "${script_config_file}"
		script_exit_code="111"
		exit
		;;
	3)
		printf "Config file: '%s' exists, but it is not readable, exiting.\\n" "${script_config_file}"
		script_exit_code="112"
		exit
		;;
	*)
		printf "Something went terribly wrong in line number: '%s', exiting.\\n" "${LINENO}"
		script_exit_code="113"
		exit
		;;
esac



#-------------------------
# Should never be reached:
#-------------------------

printf "Ooops!!! Something went terribly wrong... :( Exiting.\\n"
exit
