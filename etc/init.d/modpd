#!/usr/bin/env bash

#========================================================================================================
#
#  Author:				Christian Zettel (ccztux)
#						2017-05-14
#						http://linuxinside.at
#
#  Copyright:			Copyright Â© 2017-2020 Christian Zettel (ccztux), all rights reserved
#
#  Project website:		https://github.com/ccztux/modpd
#
#  Last Modification:	Christian Zettel (ccztux)
#						2020-02-24
#
#  Version				2.1.1
#
#  Description:			init script for modpd (Monitoring Obsessing Data Processor Daemon)
#
#  License:				GNU GPLv2
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#========================================================================================================


# modpd	This script starts and stops the modpd daemon
#
# chkconfig:	2345 70 29
#
# processname:	modpd
# description:	Monitoring Obsessing Data Processor Daemon (modpd)



### BEGIN INIT INFO
# Provides:		modpd
# Required-Start:	$remote_fs $syslog
# Required-Stop:	$remote_fs $syslog
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	modpd
# Description:		modpd
### END INIT INFO



# Source function library
if [ -f /lib/lsb/init-functions ]
then
	# shellcheck source=/lib/lsb/init-functions
	# shellcheck disable=SC1091
	source /lib/lsb/init-functions
else
	log_failure_msg "File: '/lib/lsb/init-functions' doesnt exist."
	exit 6
fi

# Load the VERBOSE setting and other rcS variables
if [ -f /lib/init/vars.sh ]
then
	# shellcheck source=/lib/init/vars.sh
	# shellcheck disable=SC1091
	source /lib/init/vars.sh
fi

# Source configuration.
if [ -f /etc/sysconfig/modpd ]
then
	# shellcheck source=/etc/sysconfig/modpd
	# shellcheck disable=SC1091
	source /etc/sysconfig/modpd
else
	DAEMON_BASE_PATH="${DAEMON_BASE_PATH:?ERROR: Required variable is unset.}"
	DAEMON_PATH="${DAEMON_PATH:?ERROR: Required variable is unset.}"
	DAEMON_NAME="${DAEMON_NAME:?ERROR: Required variable is unset.}"
	DAEMON_LOCK_FILE="${DAEMON_LOCK_FILE:?ERROR: Required variable is unset.}"
	DAEMON_CONFIG_FILE="${DAEMON_CONFIG_FILE:?ERROR: Required variable is unset.}"
	DAEMON_ARGS="${DAEMON_ARGS:?ERROR: Required variable is unset.}"
	DAEMON_USER="${DAEMON_USER:?ERROR: Required variable is unset.}"
	DAEMON_RETVAL="${DAEMON_RETVAL:?ERROR: Required variable is unset.}"
fi

# Check if daemon is executeable
if [ ! -x "${DAEMON_PATH}" ]
then
	log_failure_msg "${DAEMON_PATH} is not executeable."
	exit 5
fi



check_uid()
{
	if [ "$UID" -ne "0" ]
	then
		log_failure_msg "User has insufficient privilege."
		exit 4
	fi
}

do_start()
{
	check_uid
	do_status > /dev/null 2>&1

	DAEMON_RETVAL="$?"

	if [ "${DAEMON_RETVAL}" != "0" ]
	then
		if [ -n "${DAEMON_USER}" ]
		then
			runuser "${DAEMON_USER}" -c "setsid ${DAEMON_PATH} ${DAEMON_ARGS} </dev/null >/dev/null 2>&1 &" </dev/null >/dev/null 2>&1
		else
			setsid "${DAEMON_PATH}" "${DAEMON_ARGS}" </dev/null >/dev/null 2>&1 &
		fi

		DAEMON_RETVAL="$?"

		if [ "${DAEMON_RETVAL}" == "0" ]
		then
			log_success_msg "Starting ${DAEMON_NAME}"
		else
			log_failure_msg "Starting ${DAEMON_NAME}"
		fi

		return "${DAEMON_RETVAL}"
	else
		log_failure_msg "${DAEMON_NAME} is already running"
		return "${DAEMON_RETVAL}"
	fi
}

do_stop()
{
	check_uid
	do_status > /dev/null 2>&1

	DAEMON_RETVAL="$?"

	if [ "${DAEMON_RETVAL}" == "0" ]
	then
		killproc -p "${DAEMON_LOCK_FILE}" "${DAEMON_PATH}" -SIGTERM

		DAEMON_RETVAL="$?"

		if [ "${DAEMON_RETVAL}" == "0" ]
		then
			log_success_msg "Stopping ${DAEMON_NAME}"
		else
			log_failure_msg "Stopping ${DAEMON_NAME}"
		fi

		# shellcheck disable=SC2034
		for i in {1..10}
		   do
			if do_status > /dev/null
			then
				sleep 1
			else
				break
			fi
		done

		if do_status > /dev/null
		then
		    log_warning_msg "Warning - ${DAEMON_NAME} did not exit in a timely manner"
		fi

		return "${DAEMON_RETVAL}"
	else
		log_failure_msg "${DAEMON_NAME} is already stopped"
		return "${DAEMON_RETVAL}"
	fi
}

do_status()
{
	local PIDS=
	PIDS="$(pidofproc -p "${DAEMON_LOCK_FILE}" "${DAEMON_PATH}")"

	if [ -n "${PIDS}" ]
	then
		log_success_msg "${DAEMON_NAME} (PID ${PIDS// /,}) is running"
		return 0
	else
		log_failure_msg "${DAEMON_NAME} is not running"
		return 3
	fi
}

do_reload()
{
	check_uid
	do_status > /dev/null 2>&1

	DAEMON_RETVAL="$?"

	if [ "${DAEMON_RETVAL}" == "0" ]
	then
		killproc -p "${DAEMON_LOCK_FILE}" "${DAEMON_PATH}" -SIGHUP

		DAEMON_RETVAL="$?"

		if [ "${DAEMON_RETVAL}" == "0" ]
		then
			log_success_msg "Reloading ${DAEMON_NAME}"
		else
			log_failure_msg "Reloading ${DAEMON_NAME}"
		fi

		return "${DAEMON_RETVAL}"
	else
		log_failure_msg "${DAEMON_NAME} is not running"
		return "${DAEMON_RETVAL}"
	fi

}

do_restart()
{
	do_stop
	do_start
}



case "${1}" in
	start)
		do_start
		;;
	stop)
		do_stop
		;;
	status)
		do_status
		exit "$?"
		;;
	reload)
		do_reload
		;;
	restart)
		do_restart
		;;
	*)
		echo "Usage: ${0} {start|stop|status|reload|restart}" >&2
		exit 3
		;;
esac


exit "${DAEMON_RETVAL}"
